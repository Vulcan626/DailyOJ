/*
题目描述

The sequence of n − 1 consecutive composite numbers (positive integers that are not prime and not equal to 1) lying between two successive prime numbers p and p + n is called a prime gap of length n. For example, ‹24, 25, 26, 27, 28› between 23 and 29 is a prime gap of length 6.

Your mission is to write a program to calculate, for a given positive integer k, the length of the prime gap that contains k. For convenience, the length is considered 0 in case no prime gap contains k.
输入

The input is a sequence of lines each of which contains a single positive integer. Each positive integer is greater than 1 and less than or equal to the 100000th prime number, which is 1299709. The end of the input is indicated by a line containing a single zero.
输出

The output should be composed of lines each of which contains a single non-negative integer. It is the length of the prime gap that contains the corresponding positive integer in the input if it is a composite number, or 0 otherwise. No other characters should occur in the output.
样例输入

10
11
27
2
492170
0
样例输出

4
0
6
0
114
*/


#include <bits/stdc++.h>
using namespace std;
const int MAXN=1299710;
bool u[MAXN];
int ans[MAXN];
void prepare(){
    for(int i=2;i<MAXN;i++) u[i]=1;
    for(int i=2;i<MAXN;i++){
        if(u[i]){
            for(int j=2;j*i<MAXN;j++) u[i*j]=0;
        }
    }
    for(int i=2;i<MAXN;i++){
        if(!u[i]){
            int j;
            j=i;
            while(j<MAXN&&!u[j]) j++;
            j--;
            for(int k=i;k<=j;k++) ans[k]=j-i+2;
            i=j;
        }else ans[i]=0;
    }
}
int main(){
    int k;
    prepare();
    while(scanf("%d",&k)>0&&k>0){
        printf("%d\n",ans[k]);
    }
}
