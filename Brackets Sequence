/*
题目描述

Let us define a regular brackets sequence in the following way: 

1. Empty sequence is a regular sequence. 
2. If S is a regular sequence, then (S) and [S] are both regular sequences. 
3. If A and B are regular sequences, then AB is a regular sequence. 

For example, all of the following sequences of characters are regular brackets sequences: 

(), [], (()), ([]), ()[], ()[()] 

And all of the following character sequences are not: 

(, [, ), )(, ([)], ([(] 

Some sequence of characters '(', ')', '[', and ']' is given. You are to find the shortest possible regular brackets sequence, that contains the given character sequence as a subsequence. Here, a string a1 a2 ... an is called a subsequence of the string b1 b2 ... bm, if there exist such indices 1 = i1 < i2 < ... < in = m, that aj = bij for all 1 <= j< = n.
输入

The input file contains at most 100 brackets (characters '(', ')', '[' and ']') that are situated on a single line without any other characters among them.
输出

Write to the output file a single line that contains some regular brackets sequence that has the minimal possible length and contains the given sequence as a subsequence.
样例输入

([(]
样例输出

()[()]
*/

#include<bits/stdc++.h>
using namespace std;
const int N=100;
char str[N];
int dp[N][N];
int path[N][N];
void oprint(int i,int j){
    if(i>j) return;
    if(i==j){
        if(str[i]=='['||str[i]==']') printf("[]");
        else printf("()");
    }
    else if(path[i][j]==-1){
        printf("%c",str[i]);
        oprint(i+1,j-1);
        printf("%c",str[j]);
    }
    else{
        oprint(i,path[i][j]);
        oprint(path[i][j]+1,j);
    }
}
int main(){
    while(gets(str)){
        int n=strlen(str);
        if(n==0){
            printf("\n");
            continue;
        }
        memset(dp,0,sizeof(dp));
        for(int i=0;i<n;i++) dp[i][i]=1;
        for(int r=1;r<n;r++){
            for(int i=0;i<n-r;i++){
                int j=i+r;
                dp[i][j]=0x7fffffff;
                if((str[i]=='('&&str[j]==')')||(str[i]=='['&&str[j]==']')){
                    dp[i][j]=dp[i+1][j-1];
                    path[i][j]=-1;
                }
                for(int k=i;k<j;k++){
                    if(dp[i][j]>dp[i][k]+dp[k+1][j]){
                        dp[i][j]=dp[i][k]+dp[k+1][j];
                        path[i][j]=k;
                    }
                }
            }
        }
        oprint(0,n-1);
        printf("\n");
    }
    return 0;
}
