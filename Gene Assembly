/*
题目描述

With the large amount of genomic DNA sequence data being made available, it is becoming more important to find genes (parts of the genomic DNA which are responsible for the synthesis of proteins) in these sequences. It is known that for eukaryotes (in contrast to prokaryotes) the process is more complicated, because of the presence of junk DNA that interrupts the coding region of genes in the genomic sequence. That is, a gene is composed by several pieces (called exons) of coding regions. It is known that the order of the exons is maintained in the protein synthesis process, but the number of exons and their lengths can be arbitrary.

Most gene finding algorithms have two steps: in the first they search for possible exons; in the second they try to assemble a largest possible gene, by finding a chain with the largest possible number of exons. This chain must obey the order in which the exons appear in the genomic sequence. We say that exon i appears before exon j if the end of i precedes the beginning of j.

The objective of this problem is, given a set of possible exons, to find the chain with the largest possible number of exons that cound be assembled to generate a gene.
输入

Several input instances are given. Each instance begins with the number 0 < n < 1000 of possible exons in the sequence. Then, each of the next n lines contains a pair of integer numbers that represent the position in which the exon starts and ends in the genomic sequence. You can suppose that the genomic sequence has at most 50000 basis. The input ends with a line with a single 0.
输出

For each input instance your program should print in one line the chain with the largest possible number of exons, by enumerating the exons in the chain. If there is more than one chain with the same number of exons, your program can print anyone of them.
样例输入

6
340 500
220 470
100 300
880 943
525 556
612 776
3
705 773
124 337
453 665
0
样例输出

3 1 5 6 4
2 3 1
*/

#include<bits/stdc++.h>
using namespace std;
int ans[1005];
struct node{
    int sta;
    int en;
    int pos;
}nod[1005];
int cmp(node p1,node p2){
    if(p1.en<=p2.en) return 1;
    return 0;
}
int main(){
    int n,i;
    int t,p;
    while(cin>>n&&n){
        for(i=1;i<=n;i++){
            scanf("%d%d",&nod[i].sta,&nod[i].en);
            nod[i].pos=i;
        }
        sort(nod+1,nod+1+n,cmp);
        t=0; p=nod[1].en;
        ans[t++]=nod[1].pos;
        for(i=2;i<=n;i++){
            if(nod[i].sta>p){
                p=nod[i].en;
                ans[t++]=nod[i].pos;
            }
        }
        cout<<ans[0];
        for(i=1;i<t;i++)
            cout<<" "<<ans[i];
        cout<<endl;
    }
    return 0;
}

